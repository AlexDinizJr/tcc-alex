generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  username   String    @unique
  avatar     String?
  coverImage String?
  bio        String?
  createdAt  DateTime  @default(now())
  helpfuls   Helpful[]

  // Role
  role UserRole @default(USER)

  // Relacionamentos
  reviews    Review[]
  lists      List[]
  savedMedia Media[]  @relation("SavedMedia")
  favorites  Media[]  @relation("Favorites")

  // Configurações de privacidade
  profileVisibility String             @default("public")
  showActivity      Boolean            @default(true)
  showSavedItems    Boolean            @default(true)
  showFavorites     Boolean            @default(true)
  showReviews       Boolean            @default(true)
  showStats         Boolean            @default(true)
  dataCollection    Boolean            @default(true)
  PasswordRecovery  PasswordRecovery[]
}

model Media {
  id             Int                   @id @default(autoincrement())
  title          String
  rating         Float
  image          String?
  description    String?
  year           Int
  type           MediaType
  classification ClassificationRating?
  reviewCount    Int?                  @default(0)

  // Relacionamentos
  genres             String[]
  streamingLinks     StreamingLink[]
  reviews            Review[]
  savedBy            User[]             @relation("SavedMedia")
  favoritedBy        User[]             @relation("Favorites")
  lists              List[]

  // Campos opcionais específicos
  artists   String[]
  directors String[]
  platforms String[]
  authors   String[]
  seasons   Int?
  duration  Int?
  pages     Int?
  publisher String?
  developer String?

  @@unique([title, type])
}

model Review {
  id       Int       @id @default(autoincrement())
  rating   Int
  comment  String
  date     DateTime  @default(now())
  helpful  Int       @default(0)       // contador de "úteis"
  helpfuls Helpful[]

  media   Media @relation(fields: [mediaId], references: [id])
  mediaId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([userId, mediaId]) // <- índice único combinando usuário + mídia
}

model List {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  items  Media[]
}

model StreamingLink {
  id      Int    @id @default(autoincrement())
  service String
  url     String
  mediaId Int
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([mediaId, service])
}

model Helpful {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model PasswordRecovery {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false) // adiciona campo usado
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum MediaType {
  MOVIE
  GAME
  MUSIC
  SERIES
  BOOK
}

enum ClassificationRating {
  L
  TEN
  TWELVE
  FOURTEEN
  SIXTEEN
  EIGHTEEN
}