const recommendationService = require('../services/recommendationService');

const recommendationController = {
  
  // Recomenda√ß√µes personalizadas para o usu√°rio
  async getUserRecommendations(req, res) {
    try {
      const userId = req.user?.id || parseInt(req.query.userId);
      
      const { 
        limit = 5, 
      } = req.query;

      if (!userId || isNaN(userId)) {
        return res.status(400).json({ 
          success: false,
          error: 'ID do usu√°rio √© obrigat√≥rio',
          details: 'Fa√ßa login ou forne√ßa um userId v√°lido'
        });
      }

      console.log(`üéØ [CONTROLLER] Gerando recomenda√ß√µes para usu√°rio ${userId}`);

      const recommendations = await recommendationService.getUserRecommendations(userId);

      console.log(`‚úÖ [CONTROLLER] ${recommendations.length} recomenda√ß√µes geradas para usu√°rio ${userId}`);

      res.json({
        success: true,
        data: recommendations,
        count: recommendations.length,
        userBased: !!userId,
        userId: userId,
        limit
      });

    } catch (error) {
      console.error('‚ùå [CONTROLLER] Erro nas recomenda√ß√µes:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao gerar recomenda√ß√µes',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  // Recomenda√ß√µes customizadas com filtros
  async getCustomRecommendations(req, res) {
    try {
      const userId = req.user?.id;
      const {
        limit = 10,
        type,
        genre,
        minRating,
        startYear,
        endYear,
        referenceMediaIds
      } = req.query;

      if (!userId) {
        return res.status(401).json({
          success: false,
          error: 'Usu√°rio n√£o autenticado'
        });
      }

      const filters = {
        type,
        genre,
        minRating: minRating ? parseFloat(minRating) : undefined,
        yearRange: startYear && endYear ? {
          start: parseInt(startYear),
          end: parseInt(endYear)
        } : undefined
      };

      // Parseia os IDs de m√≠dia de refer√™ncia
      const referenceIds = referenceMediaIds
        ? referenceMediaIds.split(',').map(id => parseInt(id)).filter(id => !isNaN(id))
        : [];

      const recommendations = await recommendationService.getCustomRecommendations(
        userId,
        filters,
        referenceIds,
        Math.min(parseInt(limit), 50)
      );

      res.json({
        success: true,
        data: recommendations,
        count: recommendations.length,
        filters,
        referenceMediaIds: referenceIds,
        userBased: true
      });

    } catch (error) {
      console.error('‚ùå Erro nas recomenda√ß√µes customizadas:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao gerar recomenda√ß√µes customizadas'
      });
    }
  },

  // Prefer√™ncias iniciais (onboarding)
  async getInitialPreferences(req, res) {
    try {
      const userId = req.user.id; 
      const { selectedMediaIds = [] } = req.body;

      if (!selectedMediaIds.length) {
        return res.status(400).json({
          success: false,
          error: 'selectedMediaIds √© obrigat√≥rio'
        });
      }

      const preferences = await recommendationService.getInitialPreferences(userId, selectedMediaIds);

      res.json({
        success: true,
        data: preferences
      });

    } catch (error) {
      console.error("‚ùå Erro ao buscar prefer√™ncias iniciais:", error);
      res.status(500).json({ 
        success: false,
        error: "Erro ao buscar prefer√™ncias iniciais" 
      });
    }
  },

  // Excluir m√≠dia das recomenda√ß√µes
  async excludeFromRecommendations(req, res) {
    try {
      const userId = req.user?.id;
      const { mediaId } = req.params;
      const { months = 3 } = req.body;

      if (!userId) {
        return res.status(401).json({ 
          success: false,
          error: 'Usu√°rio n√£o autenticado' 
        });
      }

      if (!mediaId || isNaN(parseInt(mediaId))) {
        return res.status(400).json({ 
          success: false,
          error: 'mediaId √© obrigat√≥rio e deve ser um n√∫mero v√°lido' 
        });
      }

      await recommendationService.excludeMedia(
        userId, 
        parseInt(mediaId), 
        parseInt(months)
      );

      const excludedUntil = new Date();
      excludedUntil.setMonth(excludedUntil.getMonth() + parseInt(months));

      res.json({ 
        success: true, 
        message: 'M√≠dia exclu√≠da das recomenda√ß√µes com sucesso',
        data: { 
          mediaId: parseInt(mediaId),
          excludedUntil: excludedUntil.toISOString(),
          durationMonths: parseInt(months)
        }
      });

    } catch (error) {
      console.error('‚ùå Erro ao excluir m√≠dia:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao excluir m√≠dia das recomenda√ß√µes' 
      });
    }
  },

  // Conte√∫do em alta (trending)
  async getTrending(req, res) {
    try {
      const { limit = 5 } = req.query;

      const trending = await recommendationService.getTrendingMedia({
        limit: Math.min(parseInt(limit), 50)
      });

      res.json({
        success: true,
        data: trending,
        count: trending.length
      });

    } catch (error) {
      console.error('‚ùå Erro no conte√∫do em alta:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao buscar conte√∫do em alta'
      });
    }
  },

  // M√≠dias similares
  async getSimilarMedia(req, res) {
    try {
      const mediaId = parseInt(req.params.id);
      const { 
        limit = 5, 
        excludeOriginal = true,
      } = req.query;

      if (isNaN(mediaId)) {
        return res.status(400).json({ 
          success: false,
          error: 'ID de m√≠dia inv√°lido' 
        });
      }

      const similarMedia = await recommendationService.getSimilarMedia(mediaId, {
        limit: Math.min(parseInt(limit), 20),
        excludeOriginal: excludeOriginal !== 'false'
      });

      res.json({
        success: true,
        data: {
          originalMediaId: mediaId,
          similarMedia,
          count: similarMedia.length,
        }
      });

    } catch (error) {
      console.error('Erro ao buscar m√≠dias similares:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao buscar m√≠dias similares' 
      });
    }
  },

// No recommendationController
  async getUserPreferences(req, res) {
    try {
      const userId = req.user?.id || parseInt(req.query.userId);

      if (!userId || isNaN(userId)) {
        return res.status(400).json({
          success: false,
          error: 'ID do usu√°rio √© obrigat√≥rio',
          details: 'Fa√ßa login ou forne√ßa um userId v√°lido'
        });
      }

      console.log(`üéØ [CONTROLLER] Buscando prefer√™ncias do usu√°rio ${userId}`);

      // Chama o service que retorna as prefer√™ncias (reviews, saved, favorites, eng.)
      const preferences = await recommendationService.getUserPreferences(userId);

      console.log(`‚úÖ [CONTROLLER] Prefer√™ncias carregadas para usu√°rio ${userId}`);

      res.json({
        success: true,
        userId,
        data: preferences,
        count: Object.keys(preferences).length
      });

    } catch (error) {
      console.error('‚ùå [CONTROLLER] Erro ao buscar prefer√™ncias do usu√°rio:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao buscar prefer√™ncias do usu√°rio',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

}

module.exports = recommendationController;