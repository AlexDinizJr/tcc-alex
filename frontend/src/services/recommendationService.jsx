import api from "./api";

/**
 * Busca recomenda√ß√µes personalizadas para o usu√°rio logado
 */
export async function fetchUserRecommendations(params = {}) {
  try {
    const response = await api.get("/recommendations", { params });
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar recomenda√ß√µes do usu√°rio:", error.response?.data || error);
    return [];
  }
}

/**
 * Busca recomenda√ß√µes para homepage
 */
export async function fetchHomepageRecommendations() {
  try {
    const response = await api.get("/recommendations/homepage");
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar recomenda√ß√µes para homepage:", error.response?.data || error);
    return [];
  }
}

/**
 * Busca conte√∫do em alta (trending)
 */
export async function fetchTrending() {
  const res = await fetch(`${import.meta.env.VITE_API_URL}/recommendations/trending`);
  if (!res.ok) throw new Error("Erro ao buscar trending");

  const result = await res.json();
  // Retornar apenas o array de trending
  return result.data?.trending || [].slice(0, 5);
}

/**
 * Busca m√≠dias similares a uma m√≠dia espec√≠fica
 */
export async function fetchSimilarMedia(mediaId, options = {}) {
  try {
    console.log(`üîÑ Buscando m√≠dias similares para ID: ${mediaId}`);
    const response = await api.get(`/recommendations/similar/${mediaId}`, { params: options });
    console.log("‚úÖ Resposta da API (similar):", response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erro ao buscar m√≠dias similares para ${mediaId}:`, error);
    console.error("Detalhes do erro:", {
      status: error.response?.status,
      data: error.response?.data,
      message: error.message
    });
    return [];
  }
}

/**
 * Recomenda√ß√µes baseadas em engajamento do usu√°rio
 */
export async function fetchEngagementRecommendations(params = {}) {
  try {
    const response = await api.get("/recommendations/engagement", { params });
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar recomenda√ß√µes por engajamento:", error.response?.data || error);
    return [];
  }
}

/**
 * Recomenda√ß√µes h√≠bridas otimizadas
 */
export async function fetchOptimizedRecommendations(params = {}) {
  try {
    const response = await api.get("/recommendations/optimized", { params });
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar recomenda√ß√µes otimizadas:", error.response?.data || error);
    return [];
  }
}

/**
 * Excluir m√≠dia das recomenda√ß√µes do usu√°rio
 */
export async function excludeFromRecommendations(mediaId, body = {}) {
  try {
    const response = await api.post(`/recommendations/exclude/${mediaId}`, body);
    return response.data;
  } catch (error) {
    console.error(`Erro ao excluir m√≠dia ${mediaId} das recomenda√ß√µes:`, error.response?.data || error);
    return null;
  }
}

/**
 * Buscar m√©tricas de recomenda√ß√µes
 */
export async function fetchRecommendationMetrics(params = {}) {
  try {
    const response = await api.get("/recommendations/metrics", { params });
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar m√©tricas de recomenda√ß√µes:", error.response?.data || error);
    return null;
  }
}

/**
 * Registrar engajamento do usu√°rio com uma m√≠dia
 */
export async function trackEngagement(data) {
  try {
    const response = await api.post("/recommendations/track", data);
    return response.data;
  } catch (error) {
    console.error("Erro ao registrar engajamento:", error.response?.data || error);
    return null;
  }
}