import api from "./api";

/**
 * Busca recomenda√ß√µes para o usu√°rio logado
 */
export async function fetchUserRecommendations(params = {}) {
  try {
    console.log("üåê [FRONT] Chamando API de recomenda√ß√µes com params:", params);
    const response = await api.get("/recommendations", { params });
    console.log("‚úÖ [FRONT] Resposta da API:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [FRONT] Erro na API de recomenda√ß√µes:", error);
    throw error;
  }
}

/**
 * Busca recomenda√ß√µes personalizadas para o usu√°rio logado
 */
export async function fetchCustomRecommendations(params = {}) {
  try {
    console.log("üåê [FRONT] Chamando API de recomenda√ß√µes com params:", params);
    const response = await api.get("/recommendations/custom", { params });
    console.log("‚úÖ [FRONT] Resposta da API:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [FRONT] Erro na API de recomenda√ß√µes:", error);
    throw error;
  }
}

/**
 * Busca conte√∫do em alta (trending)
 */
export async function fetchTrending() {
  const res = await fetch(`${import.meta.env.VITE_API_URL}/recommendations/trending`);
  if (!res.ok) throw new Error("Erro ao buscar trending");

  const result = await res.json();
  
  return result.data?.trending.slice(0, 5) || [];
}

/**
 * Busca m√≠dias similares a uma m√≠dia espec√≠fica
 */
export async function fetchSimilarMedia(mediaId, options = {}) {
  try {
    console.log(`üîÑ Buscando m√≠dias similares para ID: ${mediaId}`);
    const response = await api.get(`/recommendations/similar/${mediaId}`, { params: options });
    console.log("‚úÖ Resposta da API (similar):", response.data);

    // ‚ö° Aqui pegamos o array correto dentro de data
    const similarArray = Array.isArray(response.data?.data?.similarMedia)
      ? response.data.data.similarMedia.slice(0, 4) // Limitando a 4 itens
      : [];

    return similarArray;
  } catch (error) {
    console.error(`‚ùå Erro ao buscar m√≠dias similares para ${mediaId}:`, error);
    return [];
  }
}

/**
 * Pegar as prefer√™ncias iniciais do usu√°rio com base nas m√≠dias selecionadas
 */
export async function buildUserInitialPreferences(selectedMediaIds = []) {
  try {
    console.log("üåê [FRONT] Enviando m√≠dias selecionadas para gerar prefer√™ncias iniciais:", selectedMediaIds);

    const response = await api.post("/recommendations/initial-preferences", {
      selectedMediaIds
    });

    console.log("‚úÖ [FRONT] Prefer√™ncias iniciais recebidas:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [FRONT] Erro ao gerar prefer√™ncias iniciais:", error.response?.data || error);
    return null;
  }
}

/**
 * Excluir m√≠dia das recomenda√ß√µes do usu√°rio
 */
export async function excludeFromRecommendations(mediaId, body = {}) {
  try {
    const response = await api.post(`/recommendations/exclude/${mediaId}`, body);
    return response.data; // Retorna o que a API manda
  } catch (error) {
    console.error(`Erro ao excluir m√≠dia ${mediaId} das recomenda√ß√µes:`, error.response?.data || error);
    throw error; // Propaga o erro em vez de retornar null
  }
}

/**
 * As fun√ß√µes abaixo s√£o para m√©tricas e tracking de engajamento n√£o necess√°rias para o funcionamento b√°sico das recomenda√ß√µes
 */

/**
 * Buscar m√©tricas de recomenda√ß√µes
 */
export async function fetchRecommendationMetrics(params = {}) {
  try {
    const response = await api.get("/recommendations/metrics", { params });
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar m√©tricas de recomenda√ß√µes:", error.response?.data || error);
    return null;
  }
}

/**
 * Registrar engajamento do usu√°rio com uma m√≠dia
 */
export async function trackEngagement(data) {
  try {
    const response = await api.post("/recommendations/track", data);
    return response.data;
  } catch (error) {
    console.error("Erro ao registrar engajamento:", error.response?.data || error);
    return null;
  }
}